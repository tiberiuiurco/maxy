#+title: Macs' Emacs Literate Config
#+startup: content indent

* Package manager =straight.el=
** Installation
#+begin_src emacs-lisp :tangle "init.el"
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
#+end_src
** Vanilla use-package
#+begin_src emacs-lisp :tangle "init.el"
  (setq use-package-always-ensure t)
#+end_src
* Emacs UI
** Theme
#+begin_src emacs-lisp :tangle "init.el"
  ;;  (use-package modus-themes
  ;;    :ensure t
  ;;    :init
  ;;    ;;(load-theme 'modus-operandi-tinted t))
  ;;    (load-theme 'modus-vivendi-tritanopia t))
  (set-frame-parameter nil 'alpha-background 70) ; For current frame
  (add-to-list 'default-frame-alist '(alpha-background . 70)) ; For all new frames henceforth

  (use-package doom-themes
    :init (load-theme 'doom-nord t))
#+end_src
** Misc
#+begin_src emacs-lisp :tangle "init.el"

#+end_src
* Emacs built-in
** Dired
#+begin_src emacs-lisp :tangle "init.el"
  (setq dired-guess-shell-alist-user '(("\\.pdf\\'" "zathura")
                                       ("\\.doc\\'" "libreoffice")
                                       ("\\.docx\\'" "libreoffice")
                                       ("\\.ppt\\'" "libreoffice")
                                       ("\\.pptx\\'" "libreoffice")
                                       ("\\.xls\\'" "libreoffice")
                                       ("\\.xlsx\\'" "libreoffice")
                                       ("\\.jpg\\'" "pinta")
                                       ("\\.png\\'" "pinta")
                                       ("\\.java\\'" "idea")))

  (add-to-list 'display-buffer-alist
               (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+end_src
* Load offline packages
#+begin_src emacs-lisp :tangle "init.el"
  (dolist (path '("scripts"))
    (add-to-list 'load-path (locate-user-emacs-file path)))
#+end_src
* The early initialisation of Emacs (=early-init.el=)

** Loading of the =early-init.el= file
#+begin_src emacs-lisp :tangle "early-init.el"
  (setq package-enable-at-startup t)
#+end_src
** The =early-init.el= basic frame settings
#+begin_src emacs-lisp :tangle "early-init.el"
  (setq frame-resize-pixelwise t
        ;;       frame-inhibit-implied-resize t
        ;;       frame-title-format '("%b")
        ;;       ring-bell-function 'ignore
        ;;       use-dialog-box t ; only for mouse events, which I seldom use
        ;;       use-file-dialog nil
        ;;       use-short-answers t
        inhibit-splash-screen t
        inhibit-startup-screen nil
        ;;       inhibit-x-resources t
        ;;       inhibit-startup-echo-area-message user-login-name ; read the docstring
        ;;       inhibit-startup-buffer-menu t)
        )

  ;; I do not use those graphical elements by default, but I do enable
  ;; them from time-to-time for testing purposes or to demonstrate
  ;; something.  NEVER tell a beginner to disable any of these.  They
  ;; are helpful.
  ;; (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src
* Text formatting
#+begin_src emacs-lisp :tangle "init.el"
  (global-visual-line-mode t)
#+end_src
* Utilities
** Ripgrep
#+begin_src emacs-lisp :tangle "init.el"
(use-package rg)
#+end_src

* Org Agenda
** Agenda files
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-directory (expand-file-name "~/Documents/Files/3 Org/gtd/"))
  (setq org-agenda-files `(,org-directory))
#+end_src
** Keybindings
#+begin_src emacs-lisp :tangle "init.el"
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
#+end_src
** Agenda options
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-agenda-todo-ignore-with-date t)
  (setq org-agenda-todo-ignore-timestamp t)
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-todo-ignore-deadlines t)

  (setq org-agenda-show-inherited-tags t) ;; already default
  (setq org-agenda-tags-column -100)
  (setq org-agenda-view-columns-initially nil)
  (setq org-agenda-start-with-clockreport-mode t)
  (setq org-agenda-start-with-log-mode nil)

  (setq org-log-done nil
        org-log-into-drawer t
        org-agenda-skip-scheduled-if-done t)
#+end_src

** Tasks options
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d!)" "CANCELLED(c)")
          ))
  (setq org-tag-alist
        '((:startgroup)
                                          ; Put mutually exclusive tags here
          (:endgroup)
          ;; Places
          ("@home" . ?H)
          ("@work" . ?W)
          ("@uni" . ?U)

          ;; Devices
          ("@computer" . ?C)
          ("@phone" . ?P)

          ;; Activities
          ("@planning" . ?n)
          ("jobhunting" . ?j)
          ("@programming" . ?p)
          ("@writing" . ?w)
          ("@studying" . ?s)
          ("@email" . ?e)
          ("@calls" . ?c)
          ("@explore" .?x)
          ("@emacs" .?m)
          ("@errands" . ?r)))
#+end_src

** Agenda views
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7) (org-agenda-span 7) (org-agenda-start-day "today")))
            (tags-todo "@lab" ((org-agenda-overriding-header "Lab")
                               (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))
            (tags-todo "@uni" ((org-agenda-overriding-header "University")
                               (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))
            (tags-todo "-@lab-@uni-roam/TODO"
                       ((org-agenda-overriding-header "Next Tasks")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))
            ;; (tags-todo "roam" ((org-agenda-overriding-header "Roam")))
            ))

          ("l" "Daily Life"
           ((agenda "" ((org-deadline-warning-days 7) (org-agenda-span 7) (org-agenda-start-day "today")))
            (tags-todo "@uni/NEXT" ((org-agenda-overriding-header "University")))
            (tags-todo "-@lab-@uni-roam/NEXT"
                       ((org-agenda-overriding-header "Next Tasks")))
            ;; (tags-todo "roam" ((org-agenda-overriding-header "Roam")))
            ))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("r" "Roam"
           ((tags-todo "roam" ((org-agenda-overriding-header "Roam")))))


          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            ;;         ("j" "Journal Entries")
            ;;         ("jj" "Journal" entry
            ;;          (file+olp+datetree "~/Documents/Files/3 Org/Journal.org")
            ;;          "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
            ;;          ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
            ;;          :clock-in :clock-resume
            ;;          :empty-lines 1)
            ;;         ("jm" "Meeting" entry
            ;;          (file+olp+datetree "~/Documents/Files/3 Org/Journal.org")
            ;;          "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
            ;;          :clock-in :clock-resume
            ;;          :empty-lines 1)		  ((org-agenda-overriding-header "Completed Projects")
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))

  (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t%-6e% s")
                                   (todo . " %i %-12:c %-6e")
                                   (tags . " %i %-12:c")
                                   (search . " %i %-12:c")))
#+end_src

** Capture and Refile
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-refile-targets
        '(("~/Documents/Files/3 Org/gtd/gtd.org" :maxlevel . 3)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task Inbox BACKLOG" entry (file+olp "~/Documents/Files/3 Org/gtd/gtd.org" "Tasks")
           "* BACKLOG %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("tn" "Task Inbox NEXT" entry (file+olp "~/Documents/Files/3 Org/gtd/gtd.org" "Tasks")
           "* NEXT %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("ts" "Task Tickler Scheduled" entry (file+olp "~/Documents/Files/3 Org/gtd/gtd.org" "Tickler")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))
#+end_src

** Checklists
#+begin_src emacs-lisp :tangle "init.el"
  (require 'org-checklist)
#+end_src
** Holidays
#+begin_src emacs-lisp :tangle "init.el"
  (with-eval-after-load "calendar"
    (require 'japanese-holidays)
    (setq calendar-holidays ; 他の国の祝日も表示させたい場合は適当に調整
          (append japanese-holidays holiday-local-holidays holiday-other-holidays))
    (setq calendar-mark-holidays-flag t)	; 祝日をカレンダーに表示
    ;; 土曜日・日曜日を祝日として表示する場合、以下の設定を追加します。
    ;; デフォルトで設定済み
    (setq japanese-holiday-weekend '(0 6)	   ; 土日を祝日として表示
          japanese-holiday-weekend-marker	   ; 土曜日を水色で表示
          '(holiday nil nil nil nil nil japanese-holiday-saturday))
    (add-hook 'calendar-today-visible-hook 'japanese-holiday-mark-weekend)
    (add-hook 'calendar-today-invisible-hook 'japanese-holiday-mark-weekend))
#+end_src
* Japanese
** Fonts
#+begin_src emacs-lisp
  ;; Set decent default fonts for Japanese and Chinese,
  ;; but *only* if in a graphical context.
  ;; Set Japanese second so that Japanese glyphs override Chinese
  ;; when both charsets cover the same codepoints.
  (when (fboundp #'set-fontset-font)
    (set-fontset-font t 'japanese-jisx0213.2004-1
                      ;; Source Han Code JP: https://github.com/adobe-fonts/source-han-code-jp
                      (font-spec :family "Source Han Code JP")))
  (dolist (item '(("Source Han Code JP" . 1.25)))
    (add-to-list 'face-font-rescale-alist item))
#+end_src
** Japanese keyboard inside emacs
#+begin_src emacs-lisp :tangle "init.el"
  (use-package mozc
    :ensure t)
  (setq default-input-method "japanese-mozc")

#+end_src
* Evil Mode
#+begin_src emacs-lisp :tangle "init.el"
  (use-package evil :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (evil-set-undo-system 'undo-redo)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection :ensure t
    :init
    (evil-collection-init '(calendar dired calc ediff magit elfeed info emms nov pdf))
    )

  ;; Agenda + Org Mode
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
    #+end_src
* Completion
#+begin_src emacs-lisp :tangle "init.el"
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode)
    (savehist-mode)
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))

  (use-package corfu
    :ensure t
    :init
    (setq tab-always-indent 'complete)
    (global-corfu-mode))


  (use-package marginalia
    :after vertico
    :ensure t
    :demand t
    :init
    (marginalia-mode))

  (use-package wgrep ;; Makes grep buffers editable
    :ensure t)

  (use-package consult
    :ensure t)

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src
* Org Mode
** Change Backup Files' Path
#+begin_src emacs-lisp :tangle "init.el"
  ;; Stop creating backup files
  ;; (setq make-backup-files nil)
  (setq backup-directory-alist '((".*" . "~/.Trash")))
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message "")
#+end_src
** Org Mode Config
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org
    :ensure nil
    :config
    (setq org-structure-template-alist
          '(("s" . "src")
            ("e" . "src emacs-lisp")
            ("E" . "src emacs-lisp :results value code :lexical t")
            ("t" . "src emacs-lisp :tangle FILENAME")
            ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")
            ("x" . "example")
            ("X" . "export")
            ("q" . "quote"))))
#+end_src
** Timers
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-clock-sound "~/.emacs.d/assets/pomodoro-end.wav")
#+end_src
** Org UI
*** General
#+begin_src emacs-lisp :tangle "init.el"
  ;; (custom-set-faces
  ;;  '(org-level-1 ((t (:inherit outline-1 :height 2.0))))
  ;;  '(org-level-2 ((t (:inherit outline-2 :height 1.5))))
  ;;  '(org-level-3 ((t (:inherit outline-3 :height 1.4))))
  ;;  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
  ;;  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
  ;;  )
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers nil)

  (defun lispy/org-mode-visual-fill ()
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t)
    (visual-fill-column-mode t))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . lispy/org-mode-visual-fill))

  (setq org-image-actual-width nil)
  (org-indent-mode nil)
#+end_src
*** Org Superstar
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-superstar
    :ensure t
    :config
    (org-superstar-mode)
    (setq org-superstar-remove-leading-stars t
          org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Org Alert
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-alert
    :config
    (setq alert-default-style 'libnotify)
    (setq org-alert-interval 300
          org-alert-notify-cutoff 30
          org-alert-notify-after-event-cutoff 10)
    )
#+end_src
** Org-Download - Drag and drop images
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-download
    :ensure t
    :config
    (setq-default org-download-image-dir "~/Documents/Files/3 Org/Roam/images")
    (setq-default org-download-heading-lvl nil)
    )
#+end_src
* Applications
** Elfeed
#+begin_src emacs-lisp :tangle "init.el"
  (use-package elfeed
    :ensure t
    :config
    (global-set-key (kbd "C-x w") 'elfeed)
    ;; Somewhere in your .emacs file
    (setq elfeed-feeds
          '("https://www.hotnews.ro/rss/actualitate"))
    (setq elfeed-feeds
          '(("https://www.nhk.or.jp/rss/news/cat0.xml" japan)
            ("https://www.hotnews.ro/rss/actualitate" romania)))
    )
#+end_src
** Magit
#+begin_src emacs-lisp :tangle "init.el"
  (use-package magit
    :ensure t)

#+end_src
** Emms Music Player
#+begin_src emacs-lisp :tangle "init.el"
  (use-package emms
    :config
    (emms-all)
    (setq emms-player-list '(emms-player-mpv)
          emms-info-functions '(emms-info-native)))
#+end_src
* Productivity
** Pomodoro
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-pomodoro
    :ensure t
    :init
    (setq org-pomodoro-start-sound "~/.emacs.d/assets/pomodoro-start.wav"))
#+end_src
** Nov.el
#+begin_src emacs-lisp :tangle "init.el"
  (use-package nov
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    )

  (use-package org-noter)
#+end_src
** PDF Tools
#+begin_src emacs-lisp :tangle "init.el"
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+end_src
* Org-Roam
** Main Configuration
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-roam
    :commands (org-roam-node-list)
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/Files/3 Org/Roam")
    (org-roam-completion-everywhere t)
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry "* %<%I:%M %p>: %?"
             :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: dailies"))))
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date:%U\n")
        :unnarrowed t)
       ("l" "programming language" plain
        "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("b" "book notes" plain

        (file "~/Documents/Roam/Templates/BookNoteTemplate.org")
        :if-new (file+head "${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n#+filetags: Project")
        :unnarrowed t)
       )
     )
    (setq org-roam-node-display-template
          (concat "${title:*} "
                  (propertize "${tags:10}" 'face 'org-tag)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ;;("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n I" . org-roam-node-insert-immediate)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))
#+end_src

** Org Roam UI
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-roam-ui
    :ensure t
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** Find nodes by filter
#+begin_src emacs-lisp :tangle "init.el"
  ;; Filter function to get only those nodes with the tag-name in them
  (defun my/org-roam-filter-by-tag-fn (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  ;; Filter function to get only those nodes' files with the tag-name in them
  (defun my/org-roam-list-notes-by-tag-filenames (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag-fn tag-name)
             (org-roam-node-list))))

  ;; Filter function to get only those nodes without the tag-name in them
  (defun my/org-roam-filter-by-tag-fn--exclusion (tag-name)
    (lambda (node)
      (not (member tag-name (org-roam-node-tags node)))))

  ;; Filter function to get only those nodes' files without the tag-name in them
  (defun my/org-roam-list-notes-by-tag-filenames--exclusion (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag-fn--exclusion tag-name)
             (org-roam-node-list))))

  ;; This function asks for direct input of tag, without help in minibuffer
  ;; (defun my/org-roam-find-by-tag (tag-name)
  ;;   (interactive "sTag: ")
  ;;   (org-roam-node-find nil nil (my/org-roam-filter-by-tag-fn tag-name)))

  ;; Eval after Org-Roam is loaded because I am using the 'org-roam-db-query' as a dependency

  (defun my/org-roam-find-by-tag ()
    (interactive)
    (unless (featurep 'org-roam-db)
      (require 'org-roam-db))
    (let ((tag-name (completing-read "Choose a tag: " (mapcar 'car (org-roam-db-query "SELECT tag FROM tags")))))
      (org-roam-node-find
       nil
       nil
       (my/org-roam-filter-by-tag-fn tag-name))))

  ;; Exclude dailies
  (defun my/org-roam-find-without-dailies ()
    (interactive)
    (unless (featurep 'org-roam-db)
      (require 'org-roam-db))
    (let ((tag-name "dailies"))
      (org-roam-node-find
       nil
       nil
       (my/org-roam-filter-by-tag-fn--exclusion tag-name))))

  (global-set-key (kbd "C-c n f") 'my/org-roam-find-without-dailies)
  (global-set-key (kbd "C-c n t") 'my/org-roam-find-by-tag)
#+end_src
* Programming
** Projectile
#+begin_src emacs-lisp :tangle "init.el"
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (setq projectile-project-search-path '(("~/Documents/Projects" . 1) "~/.emacs.d/" "~/Documents/Files/"))
    ;; Recommended keymap prefix on Windows/Linux
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    )
#+end_src
** Webdev
+begin_src emacs-lisp :tangle "init.el"
;; web-mode
(setq web-mode-markup-indent-offset 4)
(setq web-mode-code-indent-offset 4)
(setq web-mode-css-indent-offset 4)
(use-package web-mode
:ensure t
:mode (("\\.js\\'" . web-mode)
("\\.jsx\\'" .  web-mode)
("\\.ts\\'" . web-mode)
("\\.tsx\\'" . web-mode)
("\\.html\\'" . web-mode))
:commands web-mode)

;; (use-package tree-sitter
;;   :config
;;   (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
;;   (tree-sitter-require 'tsx)
;;   (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx))
;;   )
;; (use-package tree-sitter-langs
;;   :after tree-sitter
;;   :config
;;   (tree-sitter-require 'tsx)
;;   (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx))
;;   )

(use-package lsp-mode
:ensure t
:hook (
(web-mode . lsp-deferred)
(lsp-mode . lsp-enable-which-key-integration)
)
:commands lsp-deferred)

(use-package lsp-ui
:ensure t
:commands lsp-ui-mode)

(use-package typescript-mode
:mode 
(("\\.ts\\'" . typescript-mode)
("\\.tsx\\'" . tsx-ts-mode))
:init
(setq typescript-tsx-indent-offset 2)
(setq typescript-indent-level 2)
:hook
(typescript-mode-hook . subword-mode)
:config)


(use-package prettier-js
:ensure t)
(add-hook 'web-mode-hook #'(lambda ()
(enable-minor-mode
'("\\.jsx?\\'" . prettier-js-mode))
(enable-minor-mode
'("\\.tsx?\\'" . prettier-js-mode))))

(use-package tide
:ensure t
:config
(add-hook 'typescript-mode-hook
(lambda ()
(tide-setup)
(flycheck-mode t)
(setq flycheck-check-syntax-automatically '(save mode-enabled))
(eldoc-mode t)
(company-mode-on))))
+end_src
** Line Numbers
#+begin_src emacs-lisp :tangle "init.el"
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
** Lsp
#+begin_src emacs-lisp :tangle "init.el"
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :hook (
           js-mode . lsp)
    :config
    (lsp-enable-which-key-integration t))
  (use-package lsp-ui)
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src
* Keybindings
** Which-key
#+begin_src emacs-lisp :tangle "init.el"
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
** General
#+begin_src emacs-lisp :tangle "init.el"
  (use-package general
    :ensure t
    :config
    (general-evil-setup t)

    (general-create-definer my-general-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode


    (my-general-keys
      "t"  '(:ignore t :which-key "Toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")

      "b"  '(:ignore t :which-key "Buffers")
      "bh" '(previous-buffer :which-key "Previous Buffer")
      "bl" '(previous-buffer :which-key "Next Buffer")
      "bf" '(switch-to-buffer :which-key "List Buffers")
      "br" '(ivy-resume :which-key "Resume last completion buffer")

      "f" '(:ignore t :which-key "Find")
      "fo" '(consult-outline :which-key "Find outline")
      "fb" '(consult-buffer :which-key "Find buffer")
      "fe" '((lambda () (interactive) (find-file "~/.emacs.d/")) :which-key "Open Emacs Dired")
      "fg" '(consult-ripgrep :which-key "Ripgrep current dir")
      "f." '((lambda () (interactive) (find-file "~/Documents/Files/3 Org/gtd")) :which-key "Open gtd Dired")
      "f," '((lambda () (interactive) (find-file "~/.emacs.d/readme.org")) :which-key "Open emacs config")

      
      "m" '(:ignore t :which-key "Music")
      "mb" '(emms-browser :which-key "Search music")
      "mp" '(emms-playlist-mode-go :which-key "Open emms playlist")
      "mf" '(emms-browser-search-by-names :which-key "Find song by name")
      "mr" '(emms-browser-search-by-artist :which-key "Find artist")
      "ma" '(emms-browser-search-by-album :which-key "Find album")

      "p" '(:ignore t :which-key "Projectile")
      "pf" '(projectile-find-file :which-key "Find File in Current Buffer")
      "po" '(projectile-find-file-other-window :which-key "Find File in Other Window")
      "pp" '(projectile-switch-project :which-key "Switch Project")



      "o" '(:ignore t :which-key "Open application")
      "om" '(magit :which-key "Magit")
      ))
#+end_src
** Hydra
+begin_src emacs-lisp :tangle "init.el"
(use-package hydra :commands defhydra :ensure t)
(use-package use-package-hydra :ensure t)

(with-eval-after-load 'hydra
(defhydra my-window-movement (global-map "<f7>")
("<left>" windmove-left)
("<right>" windmove-right)
("<down>" windmove-down)
("<up>" windmove-up)
("y" other-window "other")
("h" switch-window "switch-window")
("b" consult-buffer "buffer")
("f" find-file "file")
("F" find-file-other-window "other file")
("v" (progn (split-window-right) (windmove-right)))
("o" delete-other-windows :color blue)
("a" ace-window)
("s" ace-swap-window)
("d" delete-window "delete")
("D" ace-delete-window "ace delete")
("i" ace-maximize-window "maximize")
("q" nil))
(defhydra my-file-switch (global-map "<f7>" :exit t)
("e" (find-file "~/.emacs.d/readme.org") "Emacs Config")
("g" (find-file "~/Documents/Files/3 Org/gtd/gtd.org") "GTD File")
("h" (find-file "~/Documents/Files/3 Org/gtd") "GTD Directory")
)
(defhydra org-commands (global-map "<f5>" :exit t)
("o" consult-outline "Find Outline")
)
(defhydra open-application (global-map "<f6>" :exit t)
("m" magit "Magit")
("g" (find-file "~/Documents/Files/3 Org/gtd/gtd.org") "GTD File")
("o" (find-file "~/Documents/Files/3 Org/gtd") "GTD Directory")) 
)
+end_src

** Key-Chord
+begin_src emacs-lisp :tangle "init.el"
(use-package key-chord :ensure t
:config
(key-chord-mode 1)
:init
(setq key-chord-one-key-delay 0.16)
(setq key-chord-two-keys-delay 0.002)

(key-chord-define-global "uu" 'undo)
(key-chord-define-global "kk" 'kill-whole-line)
(key-chord-define-global "yy" 'my-window-movement/body)

)
+end_src
** Emacs Vanilla
+begin_src emacs-lisp :tangle "init.el"
(global-set-key (kbd "C-j") 'eval-print-last-sexp)
+end_src
* Communication
** Email
#+begin_src emacs-lisp :tangle "init.el"
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    ;; :defer 20 ; Wait until 20 seconds after startup
    :config

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail/gmail-main")

    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")

  
    (setq mu4e-maildir-shortcuts
          '((:maildir "/Inbox"    :key ?i)
            (:maildir "/[Gmail]/Sent Mail" :key ?s)
            (:maildir "/[Gmail]/Trash"     :key ?t)
            (:maildir "/[Gmail]/Drafts"    :key ?d)
            (:maildir "/[Gmail]/All Mail"  :key ?a))))
#+end_src
** IRC (ERC)
#+begin_src emacs-lisp :tangle "init.el"
  (setq erc-server "irc.libera.chat"
        erc-nick "tsubo"    ; Change this!
        erc-user-full-name "Emacs User"  ; And this!
        erc-track-shorten-start 8
        erc-autojoin-channels-alist '((".*" "#systemcrafters" "#emacs"))
        erc-kill-buffer-on-part t
        erc-auto-query 'bury)
#+end_src

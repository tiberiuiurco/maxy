#+title: Macs' Emacs Literate Config
#+startup: content indent

* Package manager =straight.el=
#+begin_src emacs-lisp :tangle "init.el"
  ;; (defvar bootstrap-version)
  ;; (let ((bootstrap-file
  ;;        (expand-file-name
  ;;         "straight/repos/straight.el/bootstrap.el"
  ;;         (or (bound-and-true-p straight-base-dir)
  ;;             user-emacs-directory)))
  ;;       (bootstrap-version 7))
  ;;   (unless (file-exists-p bootstrap-file)
  ;;     (with-current-buffer
  ;;         (url-retrieve-synchronously
  ;;          "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  ;;          'silent 'inhibit-cookies)
  ;;       (goto-char (point-max))
  ;;       (eval-print-last-sexp)))
  ;;   (load bootstrap-file nil 'nomessage))
  ;; (straight-use-package 'use-package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src

* Emacs UI
** Theme
#+begin_src emacs-lisp :tangle "init.el"
  (use-package modus-themes
    :ensure t
    :init
    (load-theme 'modus-vivendi-tritanopia t))
#+end_src
* Load offline packages
#+begin_src emacs-lisp :tangle "init.el"
  (dolist (path '("scripts"))
    (add-to-list 'load-path (locate-user-emacs-file path)))
#+end_src
* The early initialisation of Emacs (=early-init.el=)

** Loading of the =early-init.el= file
#+begin_src emacs-lisp :tangle "early-init.el"
(setq package-enable-at-startup t)
#+end_src
** The =early-init.el= basic frame settings
#+begin_src emacs-lisp :tangle "early-init.el"
  (setq frame-resize-pixelwise t
        ;;       frame-inhibit-implied-resize t
        ;;       frame-title-format '("%b")
        ;;       ring-bell-function 'ignore
        ;;       use-dialog-box t ; only for mouse events, which I seldom use
        ;;       use-file-dialog nil
        ;;       use-short-answers t
               inhibit-splash-screen t
               inhibit-startup-screen t
        ;;       inhibit-x-resources t
        ;;       inhibit-startup-echo-area-message user-login-name ; read the docstring
        ;;       inhibit-startup-buffer-menu t)
        )

  ;; I do not use those graphical elements by default, but I do enable
  ;; them from time-to-time for testing purposes or to demonstrate
  ;; something.  NEVER tell a beginner to disable any of these.  They
  ;; are helpful.
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src
* Text formatting
#+begin_src emacs-lisp :tangle "init.el"
  (global-visual-line-mode t)
#+end_src
* Org Agenda
** Agenda files
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-directory (expand-file-name "~/Documents/Files/3 Org/gtd/"))
  (setq org-agenda-files `(,org-directory))
#+end_src
** Keybindings
#+begin_src emacs-lisp :tangle "init.el"
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
#+end_src
** Agenda options
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-agenda-todo-ignore-with-date t)
  (setq org-agenda-todo-ignore-timestamp t)
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-todo-ignore-deadlines t)

  (setq org-agenda-show-inherited-tags t) ;; already default
  (setq org-agenda-tags-column -100)
  (setq org-agenda-view-columns-initially nil)
  (setq org-agenda-start-with-clockreport-mode t)
  (setq org-agenda-start-with-log-mode nil)

  (setq org-log-done nil
        org-log-into-drawer t
        org-agenda-skip-scheduled-if-done t)
#+end_src

** Tasks options
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d!)" "CANCELLED(c)")
          ))
  (setq org-tag-alist
        '((:startgroup)
                                          ; Put mutually exclusive tags here
          (:endgroup)
          ("@errand" . ?E)
          ("@home" . ?H)
          ("@work" . ?W)
          ("@uni" . ?u)
          ("@lab" . ?l)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("publish" . ?P)
          ("batch" . ?b)
          ("note" . ?n)
          ("idea" . ?i)))
#+end_src

** Agenda views
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7) (org-agenda-span 7) (org-agenda-start-day "today")))
            (tags-todo "@lab/NEXT" ((org-agenda-overriding-header "Lab")))
            (tags-todo "@uni/NEXT" ((org-agenda-overriding-header "University")))
            (tags-todo "-@lab-@uni-roam/NEXT"
                       ((org-agenda-overriding-header "Next Tasks")))
            ;; (tags-todo "roam" ((org-agenda-overriding-header "Roam")))
            ))

          ("l" "Daily Life"
           ((agenda "" ((org-deadline-warning-days 7) (org-agenda-span 7) (org-agenda-start-day "today")))
            (tags-todo "@uni/NEXT" ((org-agenda-overriding-header "University")))
            (tags-todo "-@lab-@uni-roam/NEXT"
                       ((org-agenda-overriding-header "Next Tasks")))
            ;; (tags-todo "roam" ((org-agenda-overriding-header "Roam")))
            ))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("r" "Roam"
           ((tags-todo "roam" ((org-agenda-overriding-header "Roam")))))


          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            ;;         ("j" "Journal Entries")
            ;;         ("jj" "Journal" entry
            ;;          (file+olp+datetree "~/Documents/Files/3 Org/Journal.org")
            ;;          "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
            ;;          ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
            ;;          :clock-in :clock-resume
            ;;          :empty-lines 1)
            ;;         ("jm" "Meeting" entry
            ;;          (file+olp+datetree "~/Documents/Files/3 Org/Journal.org")
            ;;          "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
            ;;          :clock-in :clock-resume
            ;;          :empty-lines 1)		  ((org-agenda-overriding-header "Completed Projects")
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))
#+end_src

** Capture and Refile
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-refile-targets
        '(("~/Documents/Files/3 Org/gtd/gtd.org" :maxlevel . 3)
          ("~/Documents/Files/3 Org/gtd/someday.org" :maxlevel . 1)
          ("~/Documents/Files/3 Org/gtd/tickler.org" :maxlevel . 2)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)



  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task Inbox BACKLOG" entry (file+olp "~/Documents/Files/3 Org/gtd/inbox.org" "Tasks")
           "* BACKLOG %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("tn" "Task Inbox NEXT" entry (file+olp "~/Documents/Files/3 Org/gtd/inbox.org" "Tasks")
           "* NEXT %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("ts" "Task Tickler Scheduled" entry (file+olp "~/Documents/Files/3 Org/gtd/tickler.org" "Tickler")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))
#+end_src

** Checklists
#+begin_src emacs-lisp :tangle "init.el"
  (require 'org-checklist)
#+end_src
** Holidays
#+begin_src emacs-lisp :tangle "init.el"
  (with-eval-after-load "calendar"
    (require 'japanese-holidays)
    (setq calendar-holidays ; 他の国の祝日も表示させたい場合は適当に調整
          (append japanese-holidays holiday-local-holidays holiday-other-holidays))
    (setq calendar-mark-holidays-flag t)	; 祝日をカレンダーに表示
    ;; 土曜日・日曜日を祝日として表示する場合、以下の設定を追加します。
    ;; デフォルトで設定済み
    (setq japanese-holiday-weekend '(0 6)	   ; 土日を祝日として表示
          japanese-holiday-weekend-marker	   ; 土曜日を水色で表示
          '(holiday nil nil nil nil nil japanese-holiday-saturday))
    (add-hook 'calendar-today-visible-hook 'japanese-holiday-mark-weekend)
    (add-hook 'calendar-today-invisible-hook 'japanese-holiday-mark-weekend))
#+end_src
* Japanese
** Fonts
#+begin_src emacs-lisp
  ;; Set decent default fonts for Japanese and Chinese,
  ;; but *only* if in a graphical context.
  ;; Set Japanese second so that Japanese glyphs override Chinese
  ;; when both charsets cover the same codepoints.
  (when (fboundp #'set-fontset-font)
    (set-fontset-font t 'japanese-jisx0213.2004-1
                      ;; Source Han Code JP: https://github.com/adobe-fonts/source-han-code-jp
                      (font-spec :family "Source Han Code JP")))
  (dolist (item '(("Source Han Code JP" . 1.25)))
    (add-to-list 'face-font-rescale-alist item))
#+end_src
** Japanese keyboard inside emacs
#+begin_src emacs-lisp :tangle "init.el"
  (use-package mozc
    :ensure t)
  (setq default-input-method "japanese-mozc")
  
#+end_src
* Evil Mode
#+begin_src emacs-lisp :tangle "init.el"
  (use-package evil :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection :ensure t
    :init
    (evil-collection-init '(calendar dired calc ediff magit elfeed))
    )

  ;; Agenda + Org Mode
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
* Completion
#+begin_src emacs-lisp :tangle "init.el"
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode)
    (savehist-mode)
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))

  (use-package marginalia
    :after vertico
    :ensure t
    :demand t
    :init
    (marginalia-mode))

  (use-package wgrep ;; Makes grep buffers editable
    :ensure t)

  (use-package consult
    :ensure t)

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src
* Org Mode
** Org UI
#+begin_src emacs-lisp :tangle "init.el"
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 2.0))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.5))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.4))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
   )
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t)
#+end_src
* Applications
** Elfeed
#+begin_src emacs-lisp :tangle "init.el"
  (use-package elfeed
    :ensure t
    :config
    (global-set-key (kbd "C-x w") 'elfeed)
    ;; Somewhere in your .emacs file
    (setq elfeed-feeds
          '("https://www.hotnews.ro/rss/actualitate"))
    (setq elfeed-feeds
          '(("https://www.nhk.or.jp/rss/news/cat0.xml" japan)
            ("https://www.hotnews.ro/rss/actualitate" romania)))
    )
    #+end_src
** Magit
#+begin_src emacs-lisp :tangle "init.el"
  (use-package magit
  :ensure t)

#+end_src

* Productivity
** Pomodoro
#+begin_src emacs-lisp :tangle "init.el"
      (use-package org-pomodoro
        :ensure t
        :init
        (setq org-pomodoro-start-sound "~/.emacs.d/assets/pomodoro-start.wav"))
#+end_src

* Org-Roam
** Main Configuration
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-roam
    :commands (org-roam-node-list)
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/Files/3 Org/Roam")
    (org-roam-completion-everywhere t)
    (setq org-roam-dailies-capture-templates
    	'(("d" "default" entry "* %<%I:%M %p>: %?"
             :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: dailies"))))
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date:%U\n")
        :unnarrowed t)
       ("l" "programming language" plain
        "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("b" "book notes" plain

        (file "~/Documents/Roam/Templates/BookNoteTemplate.org")
        :if-new (file+head "${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n#+filetags: Project")
        :unnarrowed t)
       )
     )
    (setq org-roam-node-display-template
  	(concat "${title:*} "
  		(propertize "${tags:10}" 'face 'org-tag)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ;;("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
    	 ("C-c n I" . org-roam-node-insert-immediate)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))
#+end_src

** Org Roam UI
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-roam-ui
    :ensure t
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** Find nodes by filter
#+begin_src emacs-lisp :tangle "init.el"
  ;; Filter function to get only those nodes with the tag-name in them
  (defun my/org-roam-filter-by-tag-fn (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  ;; Filter function to get only those nodes' files with the tag-name in them
  (defun my/org-roam-list-notes-by-tag-filenames (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag-fn tag-name)
             (org-roam-node-list))))

  ;; Filter function to get only those nodes without the tag-name in them
  (defun my/org-roam-filter-by-tag-fn--exclusion (tag-name)
    (lambda (node)
      (not (member tag-name (org-roam-node-tags node)))))

  ;; Filter function to get only those nodes' files without the tag-name in them
  (defun my/org-roam-list-notes-by-tag-filenames--exclusion (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag-fn--exclusion tag-name)
             (org-roam-node-list))))

  ;; This function asks for direct input of tag, without help in minibuffer
  ;; (defun my/org-roam-find-by-tag (tag-name)
  ;;   (interactive "sTag: ")
  ;;   (org-roam-node-find nil nil (my/org-roam-filter-by-tag-fn tag-name)))

  ;; Eval after Org-Roam is loaded because I am using the 'org-roam-db-query' as a dependency

  (defun my/org-roam-find-by-tag ()
    (interactive)
    (unless (featurep 'org-roam-db)
      (require 'org-roam-db))
    (let ((tag-name (completing-read "Choose a tag: " (mapcar 'car (org-roam-db-query "SELECT tag FROM tags")))))
      (org-roam-node-find
       nil
       nil
       (my/org-roam-filter-by-tag-fn tag-name))))

  ;; Exclude dailies
  (defun my/org-roam-find-without-dailies ()
    (interactive)
    (unless (featurep 'org-roam-db)
      (require 'org-roam-db))
    (let ((tag-name "dailies"))
      (org-roam-node-find
       nil
       nil
       (my/org-roam-filter-by-tag-fn--exclusion tag-name))))

  (global-set-key (kbd "C-c n f") 'my/org-roam-find-without-dailies)
  (global-set-key (kbd "C-c n t") 'my/org-roam-find-by-tag)
#+end_src
* Programming
** Projectile
#+begin_src emacs-lisp :tangle "init.el"
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (setq projectile-project-search-path '(("~/Documents/Projects" . 1) "~/.emacs.d/" "~/Documents/Files/"))
    ;; Recommended keymap prefix on Windows/Linux
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    )
#+end_src
** Line Numbers
#+begin_src emacs-lisp :tangle "init.el"
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
#+end_src
* Keybindings
** Which-key
#+begin_src emacs-lisp :tangle "init.el"
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
** General
#+begin_src emacs-lisp :tangle "init.el"
  (use-package general
    :ensure t
    :config
    (general-evil-setup t)

    (general-create-definer my-general-keys
                            :states '(normal insert visual emacs)
                            :keymaps 'override
                            :prefix "SPC" ;; set leader
                            :global-prefix "M-SPC") ;; access leader in insert mode


    (my-general-keys
     "t"  '(:ignore t :which-key "Toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")

     "b"  '(:ignore t :which-key "Buffers")
     "bh" '(previous-buffer :which-key "Previous Buffer")
     "bl" '(previous-buffer :which-key "Next Buffer")
     "bf" '(switch-to-buffer :which-key "List Buffers")

     "f" '(:ignore t :which-key "Find")
     "fo" '(consult-outline :which-key "Find outline")
     "fb" '(consult-buffer :which-key "Find buffer")
     "fe" '((lambda () (interactive) (find-file "~/.emacs.d/")) :which-key "Open Emacs Dired")
     "fg" '((lambda () (interactive) (find-file "~/Documents/Files/3 Org/gtd")) :which-key "Open gtd Dired")

     "p" '(:ignore t :which-key "Projectile")
     "pf" '(projectile-find-file :which-key "Find File in Current Buffer")
     "po" '(projectile-find-file-other-window :which-key "Find File in Other Window")
     "pp" '(projectile-switch-project :which-key "Switch Project")



     "o" '(:ignore t :which-key "Open application")
     "om" '(magit :which-key "Magit")
     ))
#+end_src
